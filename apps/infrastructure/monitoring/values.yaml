---
prometheus-operator:
  nameOverride: ''
  kubeTargetVersionOverride: ''
  fullnameOverride: ''
  commonLabels: {}
  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: false
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverError: true
      kubePrometheusNodeAlerting: true
      kubePrometheusNodeRecording: true
      kubernetesAbsent: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: true
      network: true
      node: true
      prometheus: true
      prometheusOperator: true
      time: true
    runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
    appNamespacesTarget: '.*'
    labels: {}
    annotations: {}
  additionalPrometheusRules: []
  global:
    rbac:
      create: true
      pspEnabled: true
      pspAnnotations: {}
    imagePullSecrets: []
  alertmanager:
    enabled: true
    apiVersion: v2
    serviceAccount:
      create: true
      name: ''
    podDisruptionBudget:
      enabled: false
      minAvailable: 1
      maxUnavailable: ''
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: 'null'
        routes:
          - match:
              alertname: Watchdog
            receiver: 'null'
      receivers:
        - name: 'null'
    tplConfig: false
    templateFiles: {}
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: internal
        cert-manager.io/cluster-issuer: letsencrypt-production
      tls:
        - hosts:
            - alertmanager.private.channings.me
          secretName: alertmanager-tls
      hosts:
        - alertmanager.private.channings.me
    secret:
      annotations: {}
    ingressPerReplica:
      enabled: false
      annotations: {}
      labels: {}
      hostPrefix: ''
      hostDomain: ''
      paths: []
      tlsSecretName: ''
      tlsSecretPerReplica:
        enabled: false
        prefix: 'alertmanager'
    service:
      annotations: {}
      labels: {}
      clusterIP: ''
      port: 9093
      targetPort: 9093
      nodePort: 30903
      externalIPs: []
      loadBalancerIP: ''
      loadBalancerSourceRanges: []
      type: ClusterIP
    servicePerReplica:
      enabled: false
      annotations: {}
      port: 9093
      targetPort: 9093
      nodePort: 30904
      loadBalancerSourceRanges: []
      type: ClusterIP
    serviceMonitor:
      interval: ''
      selfMonitor: true
      metricRelabelings: []
      relabelings: []
    alertmanagerSpec:
      podMetadata: {}
      image:
        repository: quay.io/prometheus/alertmanager
        tag: v0.20.0
      useExistingSecret: false
      secrets: []
      configMaps: []
      logFormat: logfmt
      logLevel: info
      replicas: 1
      retention: 120h
      storage: {}
      externalUrl:
      routePrefix: /
      paused: false
      nodeSelector: {}
      resources: {}
      podAntiAffinity: ''
      podAntiAffinityTopologyKey: kubernetes.io/hostname
      affinity: {}
      tolerations: []
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      listenLocal: false
      containers: []
      priorityClassName: ''
      additionalPeers: []
      portName: 'web'
  grafana:
    enabled: true
    defaultDashboardsEnabled: false
    adminPassword: prom-operator
    admin:
      existingSecret: prometheus-grafana
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: internal
        cert-manager.io/cluster-issuer: letsencrypt-production
      labels: {}
      hosts:
        - grafana.private.channings.me
      path: /
      tls:
        - hosts:
            - grafana.private.channings.me
          secretName: grafana-tls
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
      datasources:
        enabled: true
        defaultDatasourceEnabled: true
        annotations: {}
        createPrometheusReplicasDatasources: false
        label: grafana_datasource
    extraConfigmapMounts: []
    additionalDataSources: []
    service:
      portName: service
    serviceMonitor:
      interval: ''
      selfMonitor: true
      metricRelabelings: []
      relabelings: []
  kubeApiServer:
    enabled: true
    tlsConfig:
      serverName: kubernetes
      insecureSkipVerify: false
    relabelings: []
    serviceMonitor:
      interval: ''
      jobLabel: component
      selector:
        matchLabels:
          component: apiserver
          provider: kubernetes
      metricRelabelings: []
  kubelet:
    enabled: true
    namespace: kube-system
    serviceMonitor:
      interval: ''
      https: true
      cAdvisor: true
      cAdvisorMetricRelabelings: []
      cAdvisorRelabelings:
        - sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
      metricRelabelings: []
      relabelings:
        - sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
  kubeControllerManager:
    enabled: true
    endpoints: []
    service:
      port: 10252
      targetPort: 10252
    serviceMonitor:
      interval: ''
      https: false
      insecureSkipVerify: null
      serverName: null
      metricRelabelings: []
      relabelings: []
  coreDns:
    enabled: true
    service:
      port: 9153
      targetPort: 9153
    serviceMonitor:
      interval: ''
      metricRelabelings: []
      relabelings: []
  kubeDns:
    enabled: false
    service:
      dnsmasq:
        port: 10054
        targetPort: 10054
      skydns:
        port: 10055
        targetPort: 10055
    serviceMonitor:
      interval: ''
      metricRelabelings: []
      relabelings: []
      dnsmasqMetricRelabelings: []
      dnsmasqRelabelings: []
  kubeEtcd:
    enabled: false
    endpoints: []
    service:
      port: 2379
      targetPort: 2379
    serviceMonitor:
      interval: ''
      scheme: http
      insecureSkipVerify: false
      serverName: ''
      caFile: ''
      certFile: ''
      keyFile: ''
      metricRelabelings: []
      relabelings: []
  kubeScheduler:
    enabled: true
    endpoints: []
    service:
      port: 10251
      targetPort: 10251
    serviceMonitor:
      interval: ''
      https: false
      insecureSkipVerify: null
      serverName: null
      metricRelabelings: []
      relabelings: []
  kubeProxy:
    enabled: true
    endpoints: []
    service:
      port: 10249
      targetPort: 10249
    serviceMonitor:
      interval: ''
      https: false
      metricRelabelings: []
      relabelings: []
  kubeStateMetrics:
    enabled: true
    serviceMonitor:
      interval: ''
      metricRelabelings: []
      relabelings: []
  kube-state-metrics:
    rbac:
      create: true
    podSecurityPolicy:
      enabled: true
  nodeExporter:
    enabled: true
    jobLabel: jobLabel
    serviceMonitor:
      interval: ''
      scrapeTimeout: ''
      metricRelabelings: []
      relabelings: []
  prometheus-node-exporter:
    podLabels:
      jobLabel: node-exporter
    extraArgs:
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
      - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
  prometheusOperator:
    enabled: true
    manageCrds: true
    tlsProxy:
      enabled: true
      image:
        repository: squareup/ghostunnel
        tag: v1.5.2
        pullPolicy: IfNotPresent
      resources: {}
    admissionWebhooks:
      failurePolicy: Fail
      enabled: true
      patch:
        enabled: true
        image:
          repository: jettech/kube-webhook-certgen
          tag: v1.2.0
          pullPolicy: IfNotPresent
        resources: {}
        priorityClassName: ''
        podAnnotations: {}
        nodeSelector: {}
        affinity: {}
        tolerations: []
    namespaces: {}
    denyNamespaces: []
    serviceAccount:
      create: true
      name: ''
    service:
      annotations: {}
      labels: {}
      clusterIP: ''
      nodePort: 30080
      nodePortTls: 30443
      additionalPorts: []
      loadBalancerIP: ''
      loadBalancerSourceRanges: []
      type: ClusterIP
      externalIPs: []
    createCustomResource: true
    cleanupCustomResource: false
    podLabels: {}
    podAnnotations: {}
    kubeletService:
      enabled: true
      namespace: kube-system
    serviceMonitor:
      interval: ''
      selfMonitor: true
      metricRelabelings: []
      relabelings: []
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    image:
      repository: quay.io/coreos/prometheus-operator
      tag: v0.38.1
      pullPolicy: IfNotPresent
    configmapReloadImage:
      repository: quay.io/coreos/configmap-reload
      tag: v0.0.1
    prometheusConfigReloaderImage:
      repository: quay.io/coreos/prometheus-config-reloader
      tag: v0.38.1
    configReloaderCpu: 100m
    configReloaderMemory: 25Mi
    hyperkubeImage:
      repository: k8s.gcr.io/hyperkube
      tag: v1.12.1
      pullPolicy: IfNotPresent
  prometheus:
    enabled: true
    annotations: {}
    serviceAccount:
      create: true
      name: ''
    service:
      annotations: {}
      labels: {}
      clusterIP: ''
      port: 9090
      targetPort: 9090
      externalIPs: []
      nodePort: 30090
      loadBalancerIP: ''
      loadBalancerSourceRanges: []
      type: ClusterIP
      sessionAffinity: ''
    servicePerReplica:
      enabled: false
      annotations: {}
      port: 9090
      targetPort: 9090
      nodePort: 30091
      loadBalancerSourceRanges: []
      type: ClusterIP
    podDisruptionBudget:
      enabled: false
      minAvailable: 1
      maxUnavailable: ''
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: internal
        cert-manager.io/cluster-issuer: letsencrypt-production
      labels: {}
      hosts:
        - prometheus.private.channings.me
      paths: []
      tls:
        - hosts:
            - prometheus.private.channings.me
          secretName: prometheus-tls
    ingressPerReplica:
      enabled: false
      annotations: {}
      labels: {}
      hostPrefix: ''
      hostDomain: ''
      paths: []
      tlsSecretName: ''
      tlsSecretPerReplica:
        enabled: false
        prefix: 'prometheus'
    podSecurityPolicy:
      allowedCapabilities: []
    serviceMonitor:
      interval: ''
      selfMonitor: true
      scheme: ''
      tlsConfig: {}
      bearerTokenFile:
      metricRelabelings: []
      relabelings: []
    prometheusSpec:
      disableCompaction: false
      apiserverConfig: {}
      scrapeInterval: ''
      evaluationInterval: ''
      listenLocal: false
      enableAdminAPI: false
      image:
        repository: quay.io/prometheus/prometheus
        tag: v2.17.2
      tolerations: []
      alertingEndpoints: []
      externalLabels: {}
      replicaExternalLabelName: ''
      replicaExternalLabelNameClear: false
      prometheusExternalLabelName: ''
      prometheusExternalLabelNameClear: false
      externalUrl: ''
      nodeSelector: {}
      secrets: []
      configMaps: []
      query: {}
      ruleNamespaceSelector: {}
      ruleSelectorNilUsesHelmValues: true
      ruleSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      podMonitorSelectorNilUsesHelmValues: true
      podMonitorSelector: {}
      podMonitorNamespaceSelector: {}
      retention: 10d
      retentionSize: ''
      walCompression: false
      paused: false
      replicas: 1
      logLevel: info
      logFormat: logfmt
      routePrefix: /
      podMetadata: {}
      podAntiAffinity: ''
      podAntiAffinityTopologyKey: kubernetes.io/hostname
      affinity: {}
      remoteRead: []
      remoteWrite: []
      remoteWriteDashboards: false
      resources: {}
      storageSpec:
        volumeClaimTemplate:
          spec:
            volumeName: prometheus
            storageClassName: local-storage
            accessModes: ['ReadWriteMany']
            resources:
              requests:
                storage: 150Gi
      additionalScrapeConfigs: []
      additionalPrometheusSecretsAnnotations: {}
      additionalAlertManagerConfigs: []
      additionalAlertRelabelConfigs: []
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      priorityClassName: ''
      thanos: {}
      containers: []
      initContainers: []
      additionalScrapeConfigsExternal: false
      portName: 'web'
    additionalServiceMonitors: []
    additionalPodMonitors: []
